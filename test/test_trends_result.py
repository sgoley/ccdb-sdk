# coding: utf-8

"""
    Consumer Complaint Database API

    The API for searching the Consumer Complaint Database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ccdb_sdk.models.trends_result import TrendsResult

class TestTrendsResult(unittest.TestCase):
    """TrendsResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TrendsResult:
        """Test TrendsResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TrendsResult`
        """
        model = TrendsResult()
        if include_optional:
            return TrendsResult(
                aggregations = ccdb_sdk.models.trends_result_aggregations.TrendsResult_aggregations(
                    company = ccdb_sdk.models.multi_level_aggregation.MultiLevelAggregation(
                        doc_count = 56, 
                        field = ccdb_sdk.models.multi_level_aggregation_field.MultiLevelAggregation_field(
                            buckets = [
                                ccdb_sdk.models.multi_level_bucket.MultiLevelBucket(
                                    doc_count = 56, 
                                    field/raw = ccdb_sdk.models.multi_level_bucket_field_raw.MultiLevelBucket_field_raw(), 
                                    key = '', )
                                ], 
                            doc_count_error_upper_bound = 56, 
                            sum_other_doc_count = 56, ), ), 
                    issue = ccdb_sdk.models.multi_level_aggregation.MultiLevelAggregation(
                        doc_count = 56, ), 
                    product = , 
                    sub_issue = , 
                    sub_product = , 
                    tags = , )
            )
        else:
            return TrendsResult(
        )
        """

    def testTrendsResult(self):
        """Test TrendsResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
