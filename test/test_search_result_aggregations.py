# coding: utf-8

"""
    Consumer Complaint Database API

    The API for searching the Consumer Complaint Database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_result_aggregations import SearchResultAggregations

class TestSearchResultAggregations(unittest.TestCase):
    """SearchResultAggregations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResultAggregations:
        """Test SearchResultAggregations
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResultAggregations`
        """
        model = SearchResultAggregations()
        if include_optional:
            return SearchResultAggregations(
                company_public_response = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                company_response = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                consumer_consent_provided = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                consumer_disputed = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                has_narrative = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                issue = openapi_client.models.multi_level_aggregation.MultiLevelAggregation(
                    doc_count = 56, 
                    field = openapi_client.models.multi_level_aggregation_field.MultiLevelAggregation_field(
                        buckets = [
                            openapi_client.models.multi_level_bucket.MultiLevelBucket(
                                doc_count = 56, 
                                field/raw = openapi_client.models.multi_level_bucket_field_raw.MultiLevelBucket_field_raw(), 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                product = openapi_client.models.multi_level_aggregation.MultiLevelAggregation(
                    doc_count = 56, 
                    field = openapi_client.models.multi_level_aggregation_field.MultiLevelAggregation_field(
                        buckets = [
                            openapi_client.models.multi_level_bucket.MultiLevelBucket(
                                doc_count = 56, 
                                field/raw = openapi_client.models.multi_level_bucket_field_raw.MultiLevelBucket_field_raw(), 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                state = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                submitted_via = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                tags = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                timely = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), ),
                zip_code = openapi_client.models.aggregation.Aggregation(
                    doc_count = 56, 
                    field = openapi_client.models.aggregation_field.Aggregation_field(
                        buckets = [
                            openapi_client.models.bucket.Bucket(
                                doc_count = 56, 
                                key = '', )
                            ], 
                        doc_count_error_upper_bound = 56, 
                        sum_other_doc_count = 56, ), )
            )
        else:
            return SearchResultAggregations(
        )
        """

    def testSearchResultAggregations(self):
        """Test SearchResultAggregations"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
