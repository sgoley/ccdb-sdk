# coding: utf-8

"""
    Consumer Complaint Database API

    The API for searching the Consumer Complaint Database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ccdb_sdk.models.search_result import SearchResult

class TestSearchResult(unittest.TestCase):
    """SearchResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResult:
        """Test SearchResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResult`
        """
        model = SearchResult()
        if include_optional:
            return SearchResult(
                meta = ccdb_sdk.models.meta.Meta(
                    break_points = ccdb_sdk.models.break_points.break_points(), 
                    has_data_issue = True, 
                    is_data_stale = True, 
                    is_narrative_stale = True, 
                    last_indexed = '', 
                    last_updated = '', 
                    license = '', 
                    total_record_count = 56, ),
                aggregations = ccdb_sdk.models.search_result_aggregations.SearchResult_aggregations(
                    company_public_response = ccdb_sdk.models.aggregation.Aggregation(
                        doc_count = 56, 
                        field = ccdb_sdk.models.aggregation_field.Aggregation_field(
                            buckets = [
                                ccdb_sdk.models.bucket.Bucket(
                                    doc_count = 56, 
                                    key = '', )
                                ], 
                            doc_count_error_upper_bound = 56, 
                            sum_other_doc_count = 56, ), ), 
                    company_response = ccdb_sdk.models.aggregation.Aggregation(
                        doc_count = 56, ), 
                    consumer_consent_provided = , 
                    consumer_disputed = , 
                    has_narrative = , 
                    issue = ccdb_sdk.models.multi_level_aggregation.MultiLevelAggregation(
                        doc_count = 56, ), 
                    product = ccdb_sdk.models.multi_level_aggregation.MultiLevelAggregation(
                        doc_count = 56, ), 
                    state = , 
                    submitted_via = , 
                    tags = , 
                    timely = , 
                    zip_code = , ),
                hits = ccdb_sdk.models.hits.Hits(
                    hits = [
                        ccdb_sdk.models.hit.Hit(
                            _source = ccdb_sdk.models.complaint.Complaint(
                                company = '', 
                                company_public_response = '', 
                                company_response = '', 
                                complaint_id = 56, 
                                complaint_what_happened = '', 
                                consumer_consent_provided = '', 
                                consumer_disputed = '', 
                                date_received = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                date_sent_to_company = '', 
                                has_narrative = True, 
                                issue = '', 
                                product = '', 
                                state = '', 
                                sub_issue = '', 
                                sub_product = '', 
                                submitted_via = '', 
                                tags = '', 
                                timely = '', 
                                zip_code = '', ), )
                        ], 
                    max_score = 1.337, 
                    total = ccdb_sdk.models.hits_total.Hits_total(
                        value = 56, 
                        relation = '', ), )
            )
        else:
            return SearchResult(
        )
        """

    def testSearchResult(self):
        """Test SearchResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
