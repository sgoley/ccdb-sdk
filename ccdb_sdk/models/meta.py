# coding: utf-8

"""
    Consumer Complaint Database API

    The API for searching the Consumer Complaint Database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Meta(BaseModel):
    """
    Meta
    """ # noqa: E501
    break_points: Optional[Dict[str, Any]] = Field(default=None, description="Contains key value pairs of page and arrays. Used to paginate elasticsearch results in list view")
    has_data_issue: Optional[StrictBool] = Field(default=None, description="Indicates there has been an issue with the most recent data load")
    is_data_stale: Optional[StrictBool] = Field(default=None, description="Indicates the most recent data is over 5 business days old")
    is_narrative_stale: Optional[StrictBool] = Field(default=None, description="Indicates the most recent narratives are over 5 business days old")
    last_indexed: Optional[StrictStr] = Field(default=None, description="The timestamp of the most recently indexed complaint")
    last_updated: Optional[StrictStr] = Field(default=None, description="The timestamp of the most recent complaint")
    license: Optional[StrictStr] = Field(default=None, description="The open source license under which the API operates")
    total_record_count: Optional[StrictInt] = Field(default=None, description="The total number of complaints currently indexed")
    __properties: ClassVar[List[str]] = ["break_points", "has_data_issue", "is_data_stale", "is_narrative_stale", "last_indexed", "last_updated", "license", "total_record_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Meta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Meta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "break_points": obj.get("break_points"),
            "has_data_issue": obj.get("has_data_issue"),
            "is_data_stale": obj.get("is_data_stale"),
            "is_narrative_stale": obj.get("is_narrative_stale"),
            "last_indexed": obj.get("last_indexed"),
            "last_updated": obj.get("last_updated"),
            "license": obj.get("license"),
            "total_record_count": obj.get("total_record_count")
        })
        return _obj


