# coding: utf-8

"""
    Consumer Complaint Database API

    The API for searching the Consumer Complaint Database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from ccdb_sdk.models.aggregation import Aggregation
from ccdb_sdk.models.multi_level_aggregation import MultiLevelAggregation
from typing import Optional, Set
from typing_extensions import Self

class SearchResultAggregations(BaseModel):
    """
    SearchResultAggregations
    """ # noqa: E501
    company_public_response: Optional[Aggregation] = None
    company_response: Optional[Aggregation] = None
    consumer_consent_provided: Optional[Aggregation] = None
    consumer_disputed: Optional[Aggregation] = None
    has_narrative: Optional[Aggregation] = None
    issue: Optional[MultiLevelAggregation] = None
    product: Optional[MultiLevelAggregation] = None
    state: Optional[Aggregation] = None
    submitted_via: Optional[Aggregation] = None
    tags: Optional[Aggregation] = None
    timely: Optional[Aggregation] = None
    zip_code: Optional[Aggregation] = None
    __properties: ClassVar[List[str]] = ["company_public_response", "company_response", "consumer_consent_provided", "consumer_disputed", "has_narrative", "issue", "product", "state", "submitted_via", "tags", "timely", "zip_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchResultAggregations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company_public_response
        if self.company_public_response:
            _dict['company_public_response'] = self.company_public_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_response
        if self.company_response:
            _dict['company_response'] = self.company_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_consent_provided
        if self.consumer_consent_provided:
            _dict['consumer_consent_provided'] = self.consumer_consent_provided.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_disputed
        if self.consumer_disputed:
            _dict['consumer_disputed'] = self.consumer_disputed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of has_narrative
        if self.has_narrative:
            _dict['has_narrative'] = self.has_narrative.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue
        if self.issue:
            _dict['issue'] = self.issue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submitted_via
        if self.submitted_via:
            _dict['submitted_via'] = self.submitted_via.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timely
        if self.timely:
            _dict['timely'] = self.timely.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zip_code
        if self.zip_code:
            _dict['zip_code'] = self.zip_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchResultAggregations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "company_public_response": Aggregation.from_dict(obj["company_public_response"]) if obj.get("company_public_response") is not None else None,
            "company_response": Aggregation.from_dict(obj["company_response"]) if obj.get("company_response") is not None else None,
            "consumer_consent_provided": Aggregation.from_dict(obj["consumer_consent_provided"]) if obj.get("consumer_consent_provided") is not None else None,
            "consumer_disputed": Aggregation.from_dict(obj["consumer_disputed"]) if obj.get("consumer_disputed") is not None else None,
            "has_narrative": Aggregation.from_dict(obj["has_narrative"]) if obj.get("has_narrative") is not None else None,
            "issue": MultiLevelAggregation.from_dict(obj["issue"]) if obj.get("issue") is not None else None,
            "product": MultiLevelAggregation.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "state": Aggregation.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "submitted_via": Aggregation.from_dict(obj["submitted_via"]) if obj.get("submitted_via") is not None else None,
            "tags": Aggregation.from_dict(obj["tags"]) if obj.get("tags") is not None else None,
            "timely": Aggregation.from_dict(obj["timely"]) if obj.get("timely") is not None else None,
            "zip_code": Aggregation.from_dict(obj["zip_code"]) if obj.get("zip_code") is not None else None
        })
        return _obj


