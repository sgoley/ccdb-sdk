# coding: utf-8

"""
    Consumer Complaint Database API

    The API for searching the Consumer Complaint Database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.multi_level_aggregation import MultiLevelAggregation
from typing import Optional, Set
from typing_extensions import Self

class TrendsResultAggregations(BaseModel):
    """
    TrendsResultAggregations
    """ # noqa: E501
    company: Optional[MultiLevelAggregation] = None
    issue: Optional[MultiLevelAggregation] = None
    product: Optional[MultiLevelAggregation] = None
    sub_issue: Optional[MultiLevelAggregation] = None
    sub_product: Optional[MultiLevelAggregation] = None
    tags: Optional[MultiLevelAggregation] = None
    __properties: ClassVar[List[str]] = ["company", "issue", "product", "sub_issue", "sub_product", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrendsResultAggregations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of company
        if self.company:
            _dict['company'] = self.company.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue
        if self.issue:
            _dict['issue'] = self.issue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_issue
        if self.sub_issue:
            _dict['sub_issue'] = self.sub_issue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_product
        if self.sub_product:
            _dict['sub_product'] = self.sub_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrendsResultAggregations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "company": MultiLevelAggregation.from_dict(obj["company"]) if obj.get("company") is not None else None,
            "issue": MultiLevelAggregation.from_dict(obj["issue"]) if obj.get("issue") is not None else None,
            "product": MultiLevelAggregation.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "sub_issue": MultiLevelAggregation.from_dict(obj["sub_issue"]) if obj.get("sub_issue") is not None else None,
            "sub_product": MultiLevelAggregation.from_dict(obj["sub_product"]) if obj.get("sub_product") is not None else None,
            "tags": MultiLevelAggregation.from_dict(obj["tags"]) if obj.get("tags") is not None else None
        })
        return _obj


