# coding: utf-8

"""
    Consumer Complaint Database API

    The API for searching the Consumer Complaint Database

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from ccdb_sdk.models.complaint import Complaint
from ccdb_sdk.models.search_result import SearchResult
from ccdb_sdk.models.states_result import StatesResult

from ccdb_sdk.api_client import ApiClient, RequestSerialized
from ccdb_sdk.api_response import ApiResponse
from ccdb_sdk.rest import RESTResponseType


class ComplaintsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def complaint_id_get(
        self,
        complaint_id: Annotated[int, Field(le=9999999999, strict=True, ge=0, description="ID of the complaint")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Complaint:
        """Find consumer complaint by ID

        Get complaint details for a specific ID

        :param complaint_id: ID of the complaint (required)
        :type complaint_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._complaint_id_get_serialize(
            complaint_id=complaint_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Complaint",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def complaint_id_get_with_http_info(
        self,
        complaint_id: Annotated[int, Field(le=9999999999, strict=True, ge=0, description="ID of the complaint")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Complaint]:
        """Find consumer complaint by ID

        Get complaint details for a specific ID

        :param complaint_id: ID of the complaint (required)
        :type complaint_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._complaint_id_get_serialize(
            complaint_id=complaint_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Complaint",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def complaint_id_get_without_preload_content(
        self,
        complaint_id: Annotated[int, Field(le=9999999999, strict=True, ge=0, description="ID of the complaint")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find consumer complaint by ID

        Get complaint details for a specific ID

        :param complaint_id: ID of the complaint (required)
        :type complaint_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._complaint_id_get_serialize(
            complaint_id=complaint_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Complaint",
            '400': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _complaint_id_get_serialize(
        self,
        complaint_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if complaint_id is not None:
            _path_params['complaintId'] = complaint_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{complaintId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def geo_states_get(
        self,
        search_term: Annotated[Optional[StrictStr], Field(description="Return results containing specific term")] = None,
        var_field: Annotated[Optional[StrictStr], Field(description="If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these companies")] = None,
        company_public_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of public response by the company")] = None,
        company_received_max: Annotated[Optional[date], Field(description="Return results with date < company_received_max (i.e. 2017-03-04)")] = None,
        company_received_min: Annotated[Optional[date], Field(description="Return results with date >= company_received_min (i.e. 2017-03-04)")] = None,
        company_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of response by the company")] = None,
        consumer_consent_provided: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of consent consumer provided")] = None,
        consumer_disputed: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of consumer disputed, i.e. yes, no")] = None,
        date_received_max: Annotated[Optional[date], Field(description="Return results with date < date_received_max (i.e. 2017-03-04)")] = None,
        date_received_min: Annotated[Optional[date], Field(description="Return results with date >= date_received_min (i.e. 2017-03-04)")] = None,
        has_narrative: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan")] = None,
        product: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage")] = None,
        state: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these states (use abbreviation, i.e. CA, VA)")] = None,
        submitted_via: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of way consumers submitted their complaints")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of tag")] = None,
        timely: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to show whether a response was timely")] = None,
        zip_code: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these zip codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StatesResult:
        """Get the state-by-state information

        Get complaint information broken down by states

        :param search_term: Return results containing specific term
        :type search_term: str
        :param var_field: If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.
        :type var_field: str
        :param company: Filter the results to only return these companies
        :type company: List[str]
        :param company_public_response: Filter the results to only return these types of public response by the company
        :type company_public_response: List[str]
        :param company_received_max: Return results with date < company_received_max (i.e. 2017-03-04)
        :type company_received_max: date
        :param company_received_min: Return results with date >= company_received_min (i.e. 2017-03-04)
        :type company_received_min: date
        :param company_response: Filter the results to only return these types of response by the company
        :type company_response: List[str]
        :param consumer_consent_provided: Filter the results to only return these types of consent consumer provided
        :type consumer_consent_provided: List[str]
        :param consumer_disputed: Filter the results to only return the specified state of consumer disputed, i.e. yes, no
        :type consumer_disputed: List[str]
        :param date_received_max: Return results with date < date_received_max (i.e. 2017-03-04)
        :type date_received_max: date
        :param date_received_min: Return results with date >= date_received_min (i.e. 2017-03-04)
        :type date_received_min: date
        :param has_narrative: Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
        :type has_narrative: List[str]
        :param issue: Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan
        :type issue: List[str]
        :param product: Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage
        :type product: List[str]
        :param state: Filter the results to only return these states (use abbreviation, i.e. CA, VA)
        :type state: List[str]
        :param submitted_via: Filter the results to only return these types of way consumers submitted their complaints
        :type submitted_via: List[str]
        :param tags: Filter the results to only return these types of tag
        :type tags: List[str]
        :param timely: Filter the results to show whether a response was timely
        :type timely: List[str]
        :param zip_code: Filter the results to only return these zip codes
        :type zip_code: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geo_states_get_serialize(
            search_term=search_term,
            var_field=var_field,
            company=company,
            company_public_response=company_public_response,
            company_received_max=company_received_max,
            company_received_min=company_received_min,
            company_response=company_response,
            consumer_consent_provided=consumer_consent_provided,
            consumer_disputed=consumer_disputed,
            date_received_max=date_received_max,
            date_received_min=date_received_min,
            has_narrative=has_narrative,
            issue=issue,
            product=product,
            state=state,
            submitted_via=submitted_via,
            tags=tags,
            timely=timely,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StatesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def geo_states_get_with_http_info(
        self,
        search_term: Annotated[Optional[StrictStr], Field(description="Return results containing specific term")] = None,
        var_field: Annotated[Optional[StrictStr], Field(description="If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these companies")] = None,
        company_public_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of public response by the company")] = None,
        company_received_max: Annotated[Optional[date], Field(description="Return results with date < company_received_max (i.e. 2017-03-04)")] = None,
        company_received_min: Annotated[Optional[date], Field(description="Return results with date >= company_received_min (i.e. 2017-03-04)")] = None,
        company_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of response by the company")] = None,
        consumer_consent_provided: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of consent consumer provided")] = None,
        consumer_disputed: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of consumer disputed, i.e. yes, no")] = None,
        date_received_max: Annotated[Optional[date], Field(description="Return results with date < date_received_max (i.e. 2017-03-04)")] = None,
        date_received_min: Annotated[Optional[date], Field(description="Return results with date >= date_received_min (i.e. 2017-03-04)")] = None,
        has_narrative: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan")] = None,
        product: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage")] = None,
        state: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these states (use abbreviation, i.e. CA, VA)")] = None,
        submitted_via: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of way consumers submitted their complaints")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of tag")] = None,
        timely: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to show whether a response was timely")] = None,
        zip_code: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these zip codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StatesResult]:
        """Get the state-by-state information

        Get complaint information broken down by states

        :param search_term: Return results containing specific term
        :type search_term: str
        :param var_field: If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.
        :type var_field: str
        :param company: Filter the results to only return these companies
        :type company: List[str]
        :param company_public_response: Filter the results to only return these types of public response by the company
        :type company_public_response: List[str]
        :param company_received_max: Return results with date < company_received_max (i.e. 2017-03-04)
        :type company_received_max: date
        :param company_received_min: Return results with date >= company_received_min (i.e. 2017-03-04)
        :type company_received_min: date
        :param company_response: Filter the results to only return these types of response by the company
        :type company_response: List[str]
        :param consumer_consent_provided: Filter the results to only return these types of consent consumer provided
        :type consumer_consent_provided: List[str]
        :param consumer_disputed: Filter the results to only return the specified state of consumer disputed, i.e. yes, no
        :type consumer_disputed: List[str]
        :param date_received_max: Return results with date < date_received_max (i.e. 2017-03-04)
        :type date_received_max: date
        :param date_received_min: Return results with date >= date_received_min (i.e. 2017-03-04)
        :type date_received_min: date
        :param has_narrative: Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
        :type has_narrative: List[str]
        :param issue: Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan
        :type issue: List[str]
        :param product: Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage
        :type product: List[str]
        :param state: Filter the results to only return these states (use abbreviation, i.e. CA, VA)
        :type state: List[str]
        :param submitted_via: Filter the results to only return these types of way consumers submitted their complaints
        :type submitted_via: List[str]
        :param tags: Filter the results to only return these types of tag
        :type tags: List[str]
        :param timely: Filter the results to show whether a response was timely
        :type timely: List[str]
        :param zip_code: Filter the results to only return these zip codes
        :type zip_code: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geo_states_get_serialize(
            search_term=search_term,
            var_field=var_field,
            company=company,
            company_public_response=company_public_response,
            company_received_max=company_received_max,
            company_received_min=company_received_min,
            company_response=company_response,
            consumer_consent_provided=consumer_consent_provided,
            consumer_disputed=consumer_disputed,
            date_received_max=date_received_max,
            date_received_min=date_received_min,
            has_narrative=has_narrative,
            issue=issue,
            product=product,
            state=state,
            submitted_via=submitted_via,
            tags=tags,
            timely=timely,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StatesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def geo_states_get_without_preload_content(
        self,
        search_term: Annotated[Optional[StrictStr], Field(description="Return results containing specific term")] = None,
        var_field: Annotated[Optional[StrictStr], Field(description="If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these companies")] = None,
        company_public_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of public response by the company")] = None,
        company_received_max: Annotated[Optional[date], Field(description="Return results with date < company_received_max (i.e. 2017-03-04)")] = None,
        company_received_min: Annotated[Optional[date], Field(description="Return results with date >= company_received_min (i.e. 2017-03-04)")] = None,
        company_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of response by the company")] = None,
        consumer_consent_provided: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of consent consumer provided")] = None,
        consumer_disputed: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of consumer disputed, i.e. yes, no")] = None,
        date_received_max: Annotated[Optional[date], Field(description="Return results with date < date_received_max (i.e. 2017-03-04)")] = None,
        date_received_min: Annotated[Optional[date], Field(description="Return results with date >= date_received_min (i.e. 2017-03-04)")] = None,
        has_narrative: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan")] = None,
        product: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage")] = None,
        state: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these states (use abbreviation, i.e. CA, VA)")] = None,
        submitted_via: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of way consumers submitted their complaints")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of tag")] = None,
        timely: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to show whether a response was timely")] = None,
        zip_code: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these zip codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get the state-by-state information

        Get complaint information broken down by states

        :param search_term: Return results containing specific term
        :type search_term: str
        :param var_field: If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.
        :type var_field: str
        :param company: Filter the results to only return these companies
        :type company: List[str]
        :param company_public_response: Filter the results to only return these types of public response by the company
        :type company_public_response: List[str]
        :param company_received_max: Return results with date < company_received_max (i.e. 2017-03-04)
        :type company_received_max: date
        :param company_received_min: Return results with date >= company_received_min (i.e. 2017-03-04)
        :type company_received_min: date
        :param company_response: Filter the results to only return these types of response by the company
        :type company_response: List[str]
        :param consumer_consent_provided: Filter the results to only return these types of consent consumer provided
        :type consumer_consent_provided: List[str]
        :param consumer_disputed: Filter the results to only return the specified state of consumer disputed, i.e. yes, no
        :type consumer_disputed: List[str]
        :param date_received_max: Return results with date < date_received_max (i.e. 2017-03-04)
        :type date_received_max: date
        :param date_received_min: Return results with date >= date_received_min (i.e. 2017-03-04)
        :type date_received_min: date
        :param has_narrative: Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
        :type has_narrative: List[str]
        :param issue: Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan
        :type issue: List[str]
        :param product: Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage
        :type product: List[str]
        :param state: Filter the results to only return these states (use abbreviation, i.e. CA, VA)
        :type state: List[str]
        :param submitted_via: Filter the results to only return these types of way consumers submitted their complaints
        :type submitted_via: List[str]
        :param tags: Filter the results to only return these types of tag
        :type tags: List[str]
        :param timely: Filter the results to show whether a response was timely
        :type timely: List[str]
        :param zip_code: Filter the results to only return these zip codes
        :type zip_code: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._geo_states_get_serialize(
            search_term=search_term,
            var_field=var_field,
            company=company,
            company_public_response=company_public_response,
            company_received_max=company_received_max,
            company_received_min=company_received_min,
            company_response=company_response,
            consumer_consent_provided=consumer_consent_provided,
            consumer_disputed=consumer_disputed,
            date_received_max=date_received_max,
            date_received_min=date_received_min,
            has_narrative=has_narrative,
            issue=issue,
            product=product,
            state=state,
            submitted_via=submitted_via,
            tags=tags,
            timely=timely,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StatesResult",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _geo_states_get_serialize(
        self,
        search_term,
        var_field,
        company,
        company_public_response,
        company_received_max,
        company_received_min,
        company_response,
        consumer_consent_provided,
        consumer_disputed,
        date_received_max,
        date_received_min,
        has_narrative,
        issue,
        product,
        state,
        submitted_via,
        tags,
        timely,
        zip_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'company': 'multi',
            'company_public_response': 'multi',
            'company_response': 'multi',
            'consumer_consent_provided': 'multi',
            'consumer_disputed': 'multi',
            'has_narrative': 'multi',
            'issue': 'multi',
            'product': 'multi',
            'state': 'multi',
            'submitted_via': 'multi',
            'tags': 'multi',
            'timely': 'multi',
            'zip_code': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search_term is not None:
            
            _query_params.append(('search_term', search_term))
            
        if var_field is not None:
            
            _query_params.append(('field', var_field))
            
        if company is not None:
            
            _query_params.append(('company', company))
            
        if company_public_response is not None:
            
            _query_params.append(('company_public_response', company_public_response))
            
        if company_received_max is not None:
            if isinstance(company_received_max, date):
                _query_params.append(
                    (
                        'company_received_max',
                        company_received_max.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('company_received_max', company_received_max))
            
        if company_received_min is not None:
            if isinstance(company_received_min, date):
                _query_params.append(
                    (
                        'company_received_min',
                        company_received_min.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('company_received_min', company_received_min))
            
        if company_response is not None:
            
            _query_params.append(('company_response', company_response))
            
        if consumer_consent_provided is not None:
            
            _query_params.append(('consumer_consent_provided', consumer_consent_provided))
            
        if consumer_disputed is not None:
            
            _query_params.append(('consumer_disputed', consumer_disputed))
            
        if date_received_max is not None:
            if isinstance(date_received_max, date):
                _query_params.append(
                    (
                        'date_received_max',
                        date_received_max.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_received_max', date_received_max))
            
        if date_received_min is not None:
            if isinstance(date_received_min, date):
                _query_params.append(
                    (
                        'date_received_min',
                        date_received_min.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_received_min', date_received_min))
            
        if has_narrative is not None:
            
            _query_params.append(('has_narrative', has_narrative))
            
        if issue is not None:
            
            _query_params.append(('issue', issue))
            
        if product is not None:
            
            _query_params.append(('product', product))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if submitted_via is not None:
            
            _query_params.append(('submitted_via', submitted_via))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if timely is not None:
            
            _query_params.append(('timely', timely))
            
        if zip_code is not None:
            
            _query_params.append(('zip_code', zip_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/geo/states',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def root_get(
        self,
        search_term: Annotated[Optional[StrictStr], Field(description="Return results containing specific term")] = None,
        var_field: Annotated[Optional[StrictStr], Field(description="If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.")] = None,
        frm: Annotated[Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]], Field(description="Return results starting from a specific index, only if format parameter is not specified, ignore otherwise")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the size of the results")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return results sort in a particular order")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored")] = None,
        no_aggs: Annotated[Optional[StrictBool], Field(description="Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.")] = None,
        no_highlight: Annotated[Optional[StrictBool], Field(description="Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these companies")] = None,
        company_public_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of public response by the company")] = None,
        company_received_max: Annotated[Optional[date], Field(description="Return results with date < company_received_max (i.e. 2017-03-04)")] = None,
        company_received_min: Annotated[Optional[date], Field(description="Return results with date >= company_received_min (i.e. 2017-03-04)")] = None,
        company_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of response by the company")] = None,
        consumer_consent_provided: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of consent consumer provided")] = None,
        consumer_disputed: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of consumer disputed, i.e. yes, no")] = None,
        date_received_max: Annotated[Optional[date], Field(description="Return results with date < date_received_max (i.e. 2017-03-04)")] = None,
        date_received_min: Annotated[Optional[date], Field(description="Return results with date >= date_received_min (i.e. 2017-03-04)")] = None,
        has_narrative: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan")] = None,
        product: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage")] = None,
        search_after: Annotated[Optional[StrictStr], Field(description="Used in conjunction with frm parameter to paginate results. This value is calculated by combining the values from the break_points object in the _meta key from the api response. For instance to paginate to the nth page, use the value from the break_points n:[k, id] to pass to the API the value page=n&frm=25&search_after=k_id Please see https://github.com/cfpb/cfpb.github.io/issues/292 for more detailed examples")] = None,
        state: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these states (use abbreviation, i.e. CA, VA)")] = None,
        submitted_via: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of way consumers submitted their complaints")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of tag")] = None,
        timely: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to show whether a response was timely")] = None,
        zip_code: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these zip codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResult:
        """Search consumer complaints

        Search the contents of the consumer complaint database

        :param search_term: Return results containing specific term
        :type search_term: str
        :param var_field: If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.
        :type var_field: str
        :param frm: Return results starting from a specific index, only if format parameter is not specified, ignore otherwise
        :type frm: int
        :param size: Limit the size of the results
        :type size: int
        :param sort: Return results sort in a particular order
        :type sort: str
        :param format: Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored
        :type format: str
        :param no_aggs: Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.
        :type no_aggs: bool
        :param no_highlight: Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.
        :type no_highlight: bool
        :param company: Filter the results to only return these companies
        :type company: List[str]
        :param company_public_response: Filter the results to only return these types of public response by the company
        :type company_public_response: List[str]
        :param company_received_max: Return results with date < company_received_max (i.e. 2017-03-04)
        :type company_received_max: date
        :param company_received_min: Return results with date >= company_received_min (i.e. 2017-03-04)
        :type company_received_min: date
        :param company_response: Filter the results to only return these types of response by the company
        :type company_response: List[str]
        :param consumer_consent_provided: Filter the results to only return these types of consent consumer provided
        :type consumer_consent_provided: List[str]
        :param consumer_disputed: Filter the results to only return the specified state of consumer disputed, i.e. yes, no
        :type consumer_disputed: List[str]
        :param date_received_max: Return results with date < date_received_max (i.e. 2017-03-04)
        :type date_received_max: date
        :param date_received_min: Return results with date >= date_received_min (i.e. 2017-03-04)
        :type date_received_min: date
        :param has_narrative: Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
        :type has_narrative: List[str]
        :param issue: Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan
        :type issue: List[str]
        :param product: Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage
        :type product: List[str]
        :param search_after: Used in conjunction with frm parameter to paginate results. This value is calculated by combining the values from the break_points object in the _meta key from the api response. For instance to paginate to the nth page, use the value from the break_points n:[k, id] to pass to the API the value page=n&frm=25&search_after=k_id Please see https://github.com/cfpb/cfpb.github.io/issues/292 for more detailed examples
        :type search_after: str
        :param state: Filter the results to only return these states (use abbreviation, i.e. CA, VA)
        :type state: List[str]
        :param submitted_via: Filter the results to only return these types of way consumers submitted their complaints
        :type submitted_via: List[str]
        :param tags: Filter the results to only return these types of tag
        :type tags: List[str]
        :param timely: Filter the results to show whether a response was timely
        :type timely: List[str]
        :param zip_code: Filter the results to only return these zip codes
        :type zip_code: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_get_serialize(
            search_term=search_term,
            var_field=var_field,
            frm=frm,
            size=size,
            sort=sort,
            format=format,
            no_aggs=no_aggs,
            no_highlight=no_highlight,
            company=company,
            company_public_response=company_public_response,
            company_received_max=company_received_max,
            company_received_min=company_received_min,
            company_response=company_response,
            consumer_consent_provided=consumer_consent_provided,
            consumer_disputed=consumer_disputed,
            date_received_max=date_received_max,
            date_received_min=date_received_min,
            has_narrative=has_narrative,
            issue=issue,
            product=product,
            search_after=search_after,
            state=state,
            submitted_via=submitted_via,
            tags=tags,
            timely=timely,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResult",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def root_get_with_http_info(
        self,
        search_term: Annotated[Optional[StrictStr], Field(description="Return results containing specific term")] = None,
        var_field: Annotated[Optional[StrictStr], Field(description="If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.")] = None,
        frm: Annotated[Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]], Field(description="Return results starting from a specific index, only if format parameter is not specified, ignore otherwise")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the size of the results")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return results sort in a particular order")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored")] = None,
        no_aggs: Annotated[Optional[StrictBool], Field(description="Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.")] = None,
        no_highlight: Annotated[Optional[StrictBool], Field(description="Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these companies")] = None,
        company_public_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of public response by the company")] = None,
        company_received_max: Annotated[Optional[date], Field(description="Return results with date < company_received_max (i.e. 2017-03-04)")] = None,
        company_received_min: Annotated[Optional[date], Field(description="Return results with date >= company_received_min (i.e. 2017-03-04)")] = None,
        company_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of response by the company")] = None,
        consumer_consent_provided: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of consent consumer provided")] = None,
        consumer_disputed: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of consumer disputed, i.e. yes, no")] = None,
        date_received_max: Annotated[Optional[date], Field(description="Return results with date < date_received_max (i.e. 2017-03-04)")] = None,
        date_received_min: Annotated[Optional[date], Field(description="Return results with date >= date_received_min (i.e. 2017-03-04)")] = None,
        has_narrative: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan")] = None,
        product: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage")] = None,
        search_after: Annotated[Optional[StrictStr], Field(description="Used in conjunction with frm parameter to paginate results. This value is calculated by combining the values from the break_points object in the _meta key from the api response. For instance to paginate to the nth page, use the value from the break_points n:[k, id] to pass to the API the value page=n&frm=25&search_after=k_id Please see https://github.com/cfpb/cfpb.github.io/issues/292 for more detailed examples")] = None,
        state: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these states (use abbreviation, i.e. CA, VA)")] = None,
        submitted_via: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of way consumers submitted their complaints")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of tag")] = None,
        timely: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to show whether a response was timely")] = None,
        zip_code: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these zip codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResult]:
        """Search consumer complaints

        Search the contents of the consumer complaint database

        :param search_term: Return results containing specific term
        :type search_term: str
        :param var_field: If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.
        :type var_field: str
        :param frm: Return results starting from a specific index, only if format parameter is not specified, ignore otherwise
        :type frm: int
        :param size: Limit the size of the results
        :type size: int
        :param sort: Return results sort in a particular order
        :type sort: str
        :param format: Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored
        :type format: str
        :param no_aggs: Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.
        :type no_aggs: bool
        :param no_highlight: Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.
        :type no_highlight: bool
        :param company: Filter the results to only return these companies
        :type company: List[str]
        :param company_public_response: Filter the results to only return these types of public response by the company
        :type company_public_response: List[str]
        :param company_received_max: Return results with date < company_received_max (i.e. 2017-03-04)
        :type company_received_max: date
        :param company_received_min: Return results with date >= company_received_min (i.e. 2017-03-04)
        :type company_received_min: date
        :param company_response: Filter the results to only return these types of response by the company
        :type company_response: List[str]
        :param consumer_consent_provided: Filter the results to only return these types of consent consumer provided
        :type consumer_consent_provided: List[str]
        :param consumer_disputed: Filter the results to only return the specified state of consumer disputed, i.e. yes, no
        :type consumer_disputed: List[str]
        :param date_received_max: Return results with date < date_received_max (i.e. 2017-03-04)
        :type date_received_max: date
        :param date_received_min: Return results with date >= date_received_min (i.e. 2017-03-04)
        :type date_received_min: date
        :param has_narrative: Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
        :type has_narrative: List[str]
        :param issue: Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan
        :type issue: List[str]
        :param product: Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage
        :type product: List[str]
        :param search_after: Used in conjunction with frm parameter to paginate results. This value is calculated by combining the values from the break_points object in the _meta key from the api response. For instance to paginate to the nth page, use the value from the break_points n:[k, id] to pass to the API the value page=n&frm=25&search_after=k_id Please see https://github.com/cfpb/cfpb.github.io/issues/292 for more detailed examples
        :type search_after: str
        :param state: Filter the results to only return these states (use abbreviation, i.e. CA, VA)
        :type state: List[str]
        :param submitted_via: Filter the results to only return these types of way consumers submitted their complaints
        :type submitted_via: List[str]
        :param tags: Filter the results to only return these types of tag
        :type tags: List[str]
        :param timely: Filter the results to show whether a response was timely
        :type timely: List[str]
        :param zip_code: Filter the results to only return these zip codes
        :type zip_code: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_get_serialize(
            search_term=search_term,
            var_field=var_field,
            frm=frm,
            size=size,
            sort=sort,
            format=format,
            no_aggs=no_aggs,
            no_highlight=no_highlight,
            company=company,
            company_public_response=company_public_response,
            company_received_max=company_received_max,
            company_received_min=company_received_min,
            company_response=company_response,
            consumer_consent_provided=consumer_consent_provided,
            consumer_disputed=consumer_disputed,
            date_received_max=date_received_max,
            date_received_min=date_received_min,
            has_narrative=has_narrative,
            issue=issue,
            product=product,
            search_after=search_after,
            state=state,
            submitted_via=submitted_via,
            tags=tags,
            timely=timely,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResult",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def root_get_without_preload_content(
        self,
        search_term: Annotated[Optional[StrictStr], Field(description="Return results containing specific term")] = None,
        var_field: Annotated[Optional[StrictStr], Field(description="If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.")] = None,
        frm: Annotated[Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]], Field(description="Return results starting from a specific index, only if format parameter is not specified, ignore otherwise")] = None,
        size: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="Limit the size of the results")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return results sort in a particular order")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored")] = None,
        no_aggs: Annotated[Optional[StrictBool], Field(description="Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.")] = None,
        no_highlight: Annotated[Optional[StrictBool], Field(description="Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these companies")] = None,
        company_public_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of public response by the company")] = None,
        company_received_max: Annotated[Optional[date], Field(description="Return results with date < company_received_max (i.e. 2017-03-04)")] = None,
        company_received_min: Annotated[Optional[date], Field(description="Return results with date >= company_received_min (i.e. 2017-03-04)")] = None,
        company_response: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of response by the company")] = None,
        consumer_consent_provided: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of consent consumer provided")] = None,
        consumer_disputed: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of consumer disputed, i.e. yes, no")] = None,
        date_received_max: Annotated[Optional[date], Field(description="Return results with date < date_received_max (i.e. 2017-03-04)")] = None,
        date_received_min: Annotated[Optional[date], Field(description="Return results with date >= date_received_min (i.e. 2017-03-04)")] = None,
        has_narrative: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan")] = None,
        product: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage")] = None,
        search_after: Annotated[Optional[StrictStr], Field(description="Used in conjunction with frm parameter to paginate results. This value is calculated by combining the values from the break_points object in the _meta key from the api response. For instance to paginate to the nth page, use the value from the break_points n:[k, id] to pass to the API the value page=n&frm=25&search_after=k_id Please see https://github.com/cfpb/cfpb.github.io/issues/292 for more detailed examples")] = None,
        state: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these states (use abbreviation, i.e. CA, VA)")] = None,
        submitted_via: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of way consumers submitted their complaints")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these types of tag")] = None,
        timely: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to show whether a response was timely")] = None,
        zip_code: Annotated[Optional[List[StrictStr]], Field(description="Filter the results to only return these zip codes")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search consumer complaints

        Search the contents of the consumer complaint database

        :param search_term: Return results containing specific term
        :type search_term: str
        :param var_field: If the parameter \"search_term\" has a value, use \"field\" to specify which field is searched. If not specified, \"complaint_what_happened\" will be searched.
        :type var_field: str
        :param frm: Return results starting from a specific index, only if format parameter is not specified, ignore otherwise
        :type frm: int
        :param size: Limit the size of the results
        :type size: int
        :param sort: Return results sort in a particular order
        :type sort: str
        :param format: Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored
        :type format: str
        :param no_aggs: Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.
        :type no_aggs: bool
        :param no_highlight: Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.
        :type no_highlight: bool
        :param company: Filter the results to only return these companies
        :type company: List[str]
        :param company_public_response: Filter the results to only return these types of public response by the company
        :type company_public_response: List[str]
        :param company_received_max: Return results with date < company_received_max (i.e. 2017-03-04)
        :type company_received_max: date
        :param company_received_min: Return results with date >= company_received_min (i.e. 2017-03-04)
        :type company_received_min: date
        :param company_response: Filter the results to only return these types of response by the company
        :type company_response: List[str]
        :param consumer_consent_provided: Filter the results to only return these types of consent consumer provided
        :type consumer_consent_provided: List[str]
        :param consumer_disputed: Filter the results to only return the specified state of consumer disputed, i.e. yes, no
        :type consumer_disputed: List[str]
        :param date_received_max: Return results with date < date_received_max (i.e. 2017-03-04)
        :type date_received_max: date
        :param date_received_min: Return results with date >= date_received_min (i.e. 2017-03-04)
        :type date_received_min: date
        :param has_narrative: Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
        :type has_narrative: List[str]
        :param issue: Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by '•', Getting a Loan•Can't qualify for a loan
        :type issue: List[str]
        :param product: Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by '•', Mortgage•FHA mortgage
        :type product: List[str]
        :param search_after: Used in conjunction with frm parameter to paginate results. This value is calculated by combining the values from the break_points object in the _meta key from the api response. For instance to paginate to the nth page, use the value from the break_points n:[k, id] to pass to the API the value page=n&frm=25&search_after=k_id Please see https://github.com/cfpb/cfpb.github.io/issues/292 for more detailed examples
        :type search_after: str
        :param state: Filter the results to only return these states (use abbreviation, i.e. CA, VA)
        :type state: List[str]
        :param submitted_via: Filter the results to only return these types of way consumers submitted their complaints
        :type submitted_via: List[str]
        :param tags: Filter the results to only return these types of tag
        :type tags: List[str]
        :param timely: Filter the results to show whether a response was timely
        :type timely: List[str]
        :param zip_code: Filter the results to only return these zip codes
        :type zip_code: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_get_serialize(
            search_term=search_term,
            var_field=var_field,
            frm=frm,
            size=size,
            sort=sort,
            format=format,
            no_aggs=no_aggs,
            no_highlight=no_highlight,
            company=company,
            company_public_response=company_public_response,
            company_received_max=company_received_max,
            company_received_min=company_received_min,
            company_response=company_response,
            consumer_consent_provided=consumer_consent_provided,
            consumer_disputed=consumer_disputed,
            date_received_max=date_received_max,
            date_received_min=date_received_min,
            has_narrative=has_narrative,
            issue=issue,
            product=product,
            search_after=search_after,
            state=state,
            submitted_via=submitted_via,
            tags=tags,
            timely=timely,
            zip_code=zip_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResult",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _root_get_serialize(
        self,
        search_term,
        var_field,
        frm,
        size,
        sort,
        format,
        no_aggs,
        no_highlight,
        company,
        company_public_response,
        company_received_max,
        company_received_min,
        company_response,
        consumer_consent_provided,
        consumer_disputed,
        date_received_max,
        date_received_min,
        has_narrative,
        issue,
        product,
        search_after,
        state,
        submitted_via,
        tags,
        timely,
        zip_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'company': 'multi',
            'company_public_response': 'multi',
            'company_response': 'multi',
            'consumer_consent_provided': 'multi',
            'consumer_disputed': 'multi',
            'has_narrative': 'multi',
            'issue': 'multi',
            'product': 'multi',
            'state': 'multi',
            'submitted_via': 'multi',
            'tags': 'multi',
            'timely': 'multi',
            'zip_code': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if search_term is not None:
            
            _query_params.append(('search_term', search_term))
            
        if var_field is not None:
            
            _query_params.append(('field', var_field))
            
        if frm is not None:
            
            _query_params.append(('frm', frm))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if no_aggs is not None:
            
            _query_params.append(('no_aggs', no_aggs))
            
        if no_highlight is not None:
            
            _query_params.append(('no_highlight', no_highlight))
            
        if company is not None:
            
            _query_params.append(('company', company))
            
        if company_public_response is not None:
            
            _query_params.append(('company_public_response', company_public_response))
            
        if company_received_max is not None:
            if isinstance(company_received_max, date):
                _query_params.append(
                    (
                        'company_received_max',
                        company_received_max.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('company_received_max', company_received_max))
            
        if company_received_min is not None:
            if isinstance(company_received_min, date):
                _query_params.append(
                    (
                        'company_received_min',
                        company_received_min.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('company_received_min', company_received_min))
            
        if company_response is not None:
            
            _query_params.append(('company_response', company_response))
            
        if consumer_consent_provided is not None:
            
            _query_params.append(('consumer_consent_provided', consumer_consent_provided))
            
        if consumer_disputed is not None:
            
            _query_params.append(('consumer_disputed', consumer_disputed))
            
        if date_received_max is not None:
            if isinstance(date_received_max, date):
                _query_params.append(
                    (
                        'date_received_max',
                        date_received_max.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_received_max', date_received_max))
            
        if date_received_min is not None:
            if isinstance(date_received_min, date):
                _query_params.append(
                    (
                        'date_received_min',
                        date_received_min.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('date_received_min', date_received_min))
            
        if has_narrative is not None:
            
            _query_params.append(('has_narrative', has_narrative))
            
        if issue is not None:
            
            _query_params.append(('issue', issue))
            
        if product is not None:
            
            _query_params.append(('product', product))
            
        if search_after is not None:
            
            _query_params.append(('search_after', search_after))
            
        if state is not None:
            
            _query_params.append(('state', state))
            
        if submitted_via is not None:
            
            _query_params.append(('submitted_via', submitted_via))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if timely is not None:
            
            _query_params.append(('timely', timely))
            
        if zip_code is not None:
            
            _query_params.append(('zip_code', zip_code))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


